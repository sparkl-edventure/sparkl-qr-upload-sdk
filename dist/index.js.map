{"version":3,"sources":["../src/utils/qr.ts","../src/QrUpload.ts","../src/index.ts"],"names":["generateQrCode","data","options","size","color","backgroundColor","errorCorrectionLevel","margin","dataString","canvas","QRCode","error","generateSessionId","uuidv4","generateQrUrl","frontendUrl","sdkRoute","sessionId","url","QrUpload","config","container","track","ctx","resolve","reject","blob","file","formData","imageId","imageFile","response","result","errorMessage","status","image","img","captureButton","previewContainer","index","item","ev","from","to","initQrUpload","qrUpload","src_default"],"mappings":";;AAiBA,eAAsBA,CAAAA,CACpBC,CAAAA,CACAC,CAAAA,CAAyB,GACR,CACjB,GAAM,CACJ,IAAA,CAAAC,CAAAA,CAAO,IACP,KAAA,CAAAC,CAAAA,CAAQ,SAAA,CACR,eAAA,CAAAC,EAAkB,SAAA,CAClB,oBAAA,CAAAC,EAAuB,GAAA,CACvB,MAAA,CAAAC,EAAS,CACX,CAAA,CAAIL,CAAAA,CAEEM,CAAAA,CAAa,OAAOP,CAAAA,EAAS,QAAA,CAAWA,EAAO,IAAA,CAAK,SAAA,CAAUA,CAAI,CAAA,CAExE,GAAI,CAEF,IAAMQ,EAAS,QAAA,CAAS,aAAA,CAAc,QAAQ,CAAA,CAG9C,OAAA,MAAMC,EAAO,QAAA,CAASD,CAAAA,CAAQD,CAAAA,CAAY,CACxC,MAAOL,CAAAA,CACP,KAAA,CAAO,CACL,IAAA,CAAMC,CAAAA,CACN,MAAOC,CACT,CAAA,CACA,oBAAA,CAAAC,CAAAA,CACA,OAAAC,CACF,CAAC,EAGME,CAAAA,CAAO,SAAA,CAAU,WAAW,CACrC,CAAA,MAASE,CAAAA,CAAO,CACd,cAAQ,KAAA,CAAM,6BAAA,CAA+BA,CAAK,CAAA,CAC5C,IAAI,MAAM,4BAA4B,CAC9C,CACF,CAMO,SAASC,CAAAA,EAA4B,CAC1C,OAAO,CAAA,KAAA,EAAQC,EAAAA,GAAS,OAAA,CAAQ,IAAA,CAAM,EAAE,CAAC,EAC3C,CASO,SAASC,EACdC,CAAAA,CACAC,CAAAA,CAAW,aACXC,CAAAA,CACQ,CACR,IAAMC,CAAAA,CAAM,IAAI,GAAA,CAAIF,CAAAA,CAAUD,CAAW,CAAA,CAEzC,OAAIE,GACFC,CAAAA,CAAI,YAAA,CAAa,MAAA,CAAO,WAAA,CAAaD,CAAS,CAAA,CAGzCC,CAAAA,CAAI,UACb,KC3BaC,CAAAA,CAAN,KAAuC,CAS5C,WAAA,CAAYC,EAAyB,CAPrC,IAAA,CAAQ,OAAsB,EAAC,CAC/B,KAAQ,SAAA,CAAgC,IAAA,CACxC,IAAA,CAAQ,SAAA,CAAoB,GAC5B,IAAA,CAAQ,aAAA,CAAyB,MACjC,IAAA,CAAQ,YAAA,CAAwC,KAChD,IAAA,CAAQ,WAAA,CAAkC,IAAA,CAGxC,IAAA,CAAK,OAASA,CAAAA,EAAU,IAAA,CAAK,kBAAiB,CAC9C,IAAA,CAAK,UAAYR,CAAAA,GACnB,CAMQ,gBAAA,EAAmC,CACzC,OAAO,CACL,YAAa,OAAO,MAAA,CAAW,IAAc,MAAA,CAAO,QAAA,CAAS,MAAA,CAAS,EAAA,CACtE,SAAU,YAAA,CACV,SAAA,CAAW,CACT,GAAA,CAAK,aAAA,CACL,QAAS,CACP,cAAA,CAAgB,qBAClB,CACF,EACA,eAAA,CAAiB,IAAA,CACjB,UAAW,EAAA,CACX,gBAAA,CAAkB,CAAC,YAAA,CAAc,WAAA,CAAa,YAAY,CAC5D,CACF,CAMO,IAAA,CAAKQ,EAAuC,CACjD,IAAA,CAAK,OAAS,CAAE,GAAG,IAAA,CAAK,gBAAA,GAAoB,GAAGA,CAAO,EACtD,IAAA,CAAK,SAAA,CAAYR,GAAkB,CACnC,IAAA,CAAK,aAAA,CAAgB,KACvB,CAMO,KAAA,CAAMS,CAAAA,CAA8B,CACzC,GAAI,CAAC,KAAK,aAAA,CACR,MAAM,IAAI,KAAA,CAAM,0DAA0D,CAAA,CAG5E,IAAA,CAAK,UAAYA,CAAAA,CACjB,IAAA,CAAK,iBAAgB,CAEjB,IAAA,CAAK,MAAA,CAAO,eAAA,EACd,KAAK,WAAA,EAAY,CAAE,MAAMV,CAAAA,EAAS,CAChC,QAAQ,IAAA,CAAK,uCAAA,CAAyCA,CAAK,EAC7D,CAAC,EAEL,CAKO,SAAgB,CACrB,IAAA,CAAK,YAAW,CACZ,IAAA,CAAK,SAAA,GACP,IAAA,CAAK,UAAU,SAAA,CAAY,EAAA,CAC3B,KAAK,SAAA,CAAY,IAAA,EAErB,CAMA,MAAa,WAAA,EAA6B,CAGxC,GAFA,KAAK,iBAAA,EAAkB,CAEnB,MAAK,WAAA,CAIT,GAAI,CACF,IAAA,CAAK,WAAA,CAAc,MAAM,SAAA,CAAU,aAAa,YAAA,CAAa,CAC3D,MAAO,CAAE,UAAA,CAAY,aAAc,CAAA,CACnC,KAAA,CAAO,CAAA,CACT,CAAC,EAEG,IAAA,CAAK,YAAA,GACP,KAAK,YAAA,CAAa,SAAA,CAAY,KAAK,WAAA,CACnC,MAAM,IAAA,CAAK,YAAA,CAAa,MAAK,EAEjC,CAAA,MAASA,EAAO,CACd,MAAA,IAAA,CAAK,YAAY,IAAI,KAAA,CAAM,CAAA,wBAAA,EAA2BA,CAAAA,YAAiB,MAAQA,CAAAA,CAAM,OAAA,CAAU,OAAOA,CAAK,CAAC,EAAE,CAAC,CAAA,CACzGA,CACR,CACF,CAKO,UAAA,EAAmB,CACpB,KAAK,WAAA,GACP,IAAA,CAAK,YAAY,SAAA,EAAU,CAAE,OAAA,CAAQW,CAAAA,EAASA,EAAM,IAAA,EAAM,EAC1D,IAAA,CAAK,WAAA,CAAc,MAGjB,IAAA,CAAK,YAAA,GACP,IAAA,CAAK,YAAA,CAAa,UAAY,IAAA,EAElC,CAMA,MAAa,YAAA,EAA8B,CAGzC,GAFA,IAAA,CAAK,iBAAA,EAAkB,CAEnB,CAAC,KAAK,YAAA,CACR,MAAM,IAAI,KAAA,CAAM,+BAA+B,EAGjD,IAAMb,CAAAA,CAAS,QAAA,CAAS,aAAA,CAAc,QAAQ,CAAA,CAC9CA,CAAAA,CAAO,MAAQ,IAAA,CAAK,YAAA,CAAa,WACjCA,CAAAA,CAAO,MAAA,CAAS,IAAA,CAAK,YAAA,CAAa,YAElC,IAAMc,CAAAA,CAAMd,EAAO,UAAA,CAAW,IAAI,EAClC,GAAI,CAACc,CAAAA,CACH,MAAM,IAAI,KAAA,CAAM,8BAA8B,EAGhD,OAAAA,CAAAA,CAAI,UAAU,IAAA,CAAK,YAAA,CAAc,CAAA,CAAG,CAAA,CAAGd,EAAO,KAAA,CAAOA,CAAAA,CAAO,MAAM,CAAA,CAE3D,IAAI,QAAQ,CAACe,CAAAA,CAASC,CAAAA,GAAW,CACtChB,EAAO,MAAA,CAAOiB,CAAAA,EAAQ,CAChBA,CAAAA,CACFF,CAAAA,CAAQE,CAAI,CAAA,CAEZD,CAAAA,CAAO,IAAI,KAAA,CAAM,yBAAyB,CAAC,EAE/C,EAAG,YAAA,CAAc,EAAG,EACtB,CAAC,CACH,CAOA,MAAa,YAAYE,CAAAA,CAA0B,CACjD,KAAK,iBAAA,EAAkB,CAEvB,IAAMC,CAAAA,CAAW,IAAI,QAAA,CACrBA,CAAAA,CAAS,OAAO,MAAA,CAAQD,CAAI,EAE5B,IAAME,CAAAA,CAAU,OAAO,IAAA,CAAK,GAAA,EAAK,CAAA,CAAA,CAC3BC,EAAuB,CAC3B,EAAA,CAAID,EACJ,UAAA,CAAY,GAAA,CAAI,gBAAgBF,CAAI,CAAA,CACpC,IAAA,CAAAA,CAAAA,CACA,OAAQ,SACV,CAAA,CAEA,KAAK,MAAA,CAAO,IAAA,CAAKG,CAAS,CAAA,CAC1B,IAAA,CAAK,iBAAA,CAAkBD,CAAAA,CAAS,WAAW,CAAA,CAE3C,GAAI,CACF,IAAME,CAAAA,CAAW,MAAM,KAAA,CAAM,IAAA,CAAK,MAAA,CAAO,SAAA,CAAU,IAAK,CACtD,MAAA,CAAQ,OACR,OAAA,CAAS,IAAA,CAAK,OAAO,SAAA,CAAU,OAAA,CAC/B,IAAA,CAAMH,CACR,CAAC,CAAA,CAED,GAAI,CAACG,CAAAA,CAAS,EAAA,CACZ,MAAM,IAAI,KAAA,CAAM,CAAA,0BAAA,EAA6BA,CAAAA,CAAS,MAAM,CAAA,CAAE,CAAA,CAGhE,IAAMC,CAAAA,CAAS,MAAMD,EAAS,IAAA,EAAK,CACnC,OAAA,IAAA,CAAK,iBAAA,CAAkBF,EAAS,UAAU,CAAA,CAEtC,KAAK,MAAA,CAAO,gBAAA,EACd,KAAK,MAAA,CAAO,gBAAA,CAAiBG,CAAM,CAAA,CAG9BA,CACT,CAAA,MAASrB,CAAAA,CAAO,CACd,IAAMsB,CAAAA,CAAetB,aAAiB,KAAA,CAAQA,CAAAA,CAAM,OAAA,CAAU,eAAA,CAC9D,WAAK,iBAAA,CAAkBkB,CAAAA,CAAS,QAAS,MAAA,CAAWI,CAAY,EAChE,IAAA,CAAK,WAAA,CAAY,IAAI,KAAA,CAAM,kBAAkBA,CAAY,CAAA,CAAE,CAAC,CAAA,CACtDtB,CACR,CACF,CAMO,aAAA,EAAwB,CAC7B,OAAA,IAAA,CAAK,mBAAkB,CAEhBG,CAAAA,CACL,KAAK,MAAA,CAAO,WAAA,CACZ,KAAK,MAAA,CAAO,QAAA,EAAY,YAAA,CACxB,IAAA,CAAK,SACP,CACF,CAYA,MAAa,cAAA,CAAeZ,CAAAA,CAAmC,EAAC,CAAoB,CAClF,IAAA,CAAK,iBAAA,GACL,IAAMgB,CAAAA,CAAM,KAAK,aAAA,EAAc,CAE/B,OAAOlB,CAAAA,CAAekB,CAAAA,CAAK,CACzB,IAAA,CAAMhB,EAAQ,IAAA,EAAQ,GAAA,CACtB,MAAOA,CAAAA,CAAQ,KAAA,EAAS,UACxB,eAAA,CAAiBA,CAAAA,CAAQ,eAAA,EAAmB,SAAA,CAC5C,qBAAsBA,CAAAA,CAAQ,oBAAA,EAAwB,IACtD,MAAA,CAAQA,CAAAA,CAAQ,QAAU,CAC5B,CAAC,CACH,CAGQ,mBAA0B,CAChC,GAAI,CAAC,IAAA,CAAK,aAAA,CACR,MAAM,IAAI,KAAA,CAAM,qDAAqD,CAEzE,CAEQ,WAAA,CAAYS,CAAAA,CAAoB,CACtC,OAAA,CAAQ,KAAA,CAAM,kBAAmBA,CAAK,CAAA,CAClC,IAAA,CAAK,MAAA,CAAO,SACd,IAAA,CAAK,MAAA,CAAO,QAAQA,CAAK,EAE7B,CAEQ,iBAAA,CACNkB,CAAAA,CACAK,CAAAA,CACAjC,CAAAA,CACAU,EACM,CACN,IAAMwB,EAAQ,IAAA,CAAK,MAAA,CAAO,KAAKC,CAAAA,EAAOA,CAAAA,CAAI,EAAA,GAAOP,CAAO,EACpDM,CAAAA,GACFA,CAAAA,CAAM,OAASD,CAAAA,CACXjC,CAAAA,EAAM,WAAa,MAAA,GACrBkC,CAAAA,CAAM,QAAA,CAAWlC,CAAAA,CAAK,UAEpBU,CAAAA,GACFwB,CAAAA,CAAM,MAAQxB,CAAAA,CAAAA,CAEhB,IAAA,CAAK,iBAAgB,EAEzB,CAEQ,eAAA,EAAwB,CAC9B,GAAI,CAAC,IAAA,CAAK,UACR,OAIF,IAAA,CAAK,UAAU,SAAA,CAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA,CAAA,CAY3B,IAAA,CAAK,YAAA,CAAe,IAAA,CAAK,SAAA,CAAU,cAAc,gBAAgB,CAAA,CAGjE,IAAA,CAAK,cAAA,EAAe,CAGpB,IAAM0B,CAAAA,CAAgB,IAAA,CAAK,UAAU,aAAA,CAAc,iBAAiB,CAAA,CAChEA,CAAAA,EACFA,CAAAA,CAAc,gBAAA,CAAiB,OAAA,CAAS,SAAY,CAClD,GAAI,CACF,IAAMX,CAAAA,CAAO,MAAM,IAAA,CAAK,YAAA,EAAa,CAC/BC,EAAO,IAAI,IAAA,CAAK,CAACD,CAAI,CAAA,CAAG,CAAA,QAAA,EAAW,IAAA,CAAK,GAAA,EAAK,CAAA,IAAA,CAAA,CAAQ,CAAE,IAAA,CAAM,YAAa,CAAC,CAAA,CACjF,MAAM,IAAA,CAAK,YAAYC,CAAI,EAC7B,CAAA,MAAShB,CAAAA,CAAO,CACd,IAAA,CAAK,WAAA,CAAYA,CAAAA,YAAiB,MAAQA,CAAAA,CAAQ,IAAI,KAAA,CAAM,MAAA,CAAOA,CAAK,CAAC,CAAC,EAC5E,CACF,CAAC,CAAA,CAIC,IAAA,CAAK,MAAA,CAAO,eAAA,EAAmB,IAAA,CAAK,YAAA,EACxC,IAAA,CAAK,aAAY,CAAE,KAAA,CAAMA,CAAAA,EAAS,CAChC,IAAA,CAAK,WAAA,CAAYA,CAAAA,YAAiB,KAAA,CAAQA,EAAQ,IAAI,KAAA,CAAM,MAAA,CAAOA,CAAK,CAAC,CAAC,EAC5E,CAAC,EAEL,CAKQ,cAAA,EAAuB,CAC7B,GAAI,CAAC,IAAA,CAAK,SAAA,CAAW,OAErB,IAAM2B,CAAAA,CAAmB,IAAA,CAAK,SAAA,CAAU,aAAA,CAAc,oBAAoB,CAAA,CACrEA,CAAAA,GAELA,CAAAA,CAAiB,UAAY,EAAA,CAE7B,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,CAACF,CAAAA,CAAKG,CAAAA,GAAU,CAClC,IAAMC,CAAAA,CAAO,QAAA,CAAS,aAAA,CAAc,KAAK,CAAA,CACzCA,CAAAA,CAAK,SAAA,CAAY,cAAA,CACjBA,EAAK,SAAA,CAAY,IAAA,CACjBA,CAAAA,CAAK,OAAA,CAAQ,KAAA,CAAQ,MAAA,CAAOD,CAAK,CAAA,CAEjCC,EAAK,SAAA,CAAY;AAAA,gBAAA,EACHJ,EAAI,UAAU,CAAA;AAAA;AAAA,IAAA,CAAA,CAK5BI,CAAAA,CAAK,iBAAiB,WAAA,CAAaC,CAAAA,EAAM,CACvCA,CAAAA,CAAG,YAAA,EAAc,OAAA,CAAQ,YAAA,CAAc,MAAA,CAAOF,CAAK,CAAC,EACtD,CAAC,EAEDC,CAAAA,CAAK,gBAAA,CAAiB,WAAYC,CAAAA,EAAM,CACtCA,CAAAA,CAAG,cAAA,GACL,CAAC,EAEDD,CAAAA,CAAK,gBAAA,CAAiB,OAAQC,CAAAA,EAAM,CAClCA,EAAG,cAAA,EAAe,CAClB,IAAMC,CAAAA,CAAO,MAAA,CAAOD,CAAAA,CAAG,cAAc,OAAA,CAAQ,YAAY,CAAC,CAAA,CACpDE,CAAAA,CAAK,OAAQF,CAAAA,CAAG,aAAA,CAA8B,OAAA,CAAQ,KAAK,CAAA,CAC7D,CAAC,OAAO,KAAA,CAAMC,CAAI,GAAK,CAAC,MAAA,CAAO,MAAMC,CAAE,CAAA,EAAKD,CAAAA,GAASC,CAAAA,EACvD,IAAA,CAAK,aAAA,CAAcD,EAAMC,CAAE,EAE/B,CAAC,CAAA,CAGiBH,CAAAA,CAAK,cAAc,aAAa,CAAA,EACvC,gBAAA,CAAiB,OAAA,CAAS,IAAM,CACzC,KAAK,WAAA,CAAYJ,CAAAA,CAAI,EAAE,EACzB,CAAC,EAEDE,CAAAA,CAAiB,WAAA,CAAYE,CAAI,EACnC,CAAC,CAAA,EACH,CAEQ,aAAA,CAAcE,CAAAA,CAAcC,EAAkB,CACpD,GAAID,EAAO,CAAA,EAAKA,CAAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,MAAA,EAAUC,CAAAA,CAAK,GAAKA,CAAAA,EAAM,IAAA,CAAK,OAAO,MAAA,CACxE,OAGF,IAAMR,CAAAA,CAAQ,IAAA,CAAK,MAAA,CAAOO,CAAI,CAAA,CAC9B,IAAA,CAAK,OAAO,MAAA,CAAOA,CAAAA,CAAM,CAAC,CAAA,CAC1B,IAAA,CAAK,OAAO,MAAA,CAAOC,CAAAA,CAAI,CAAA,CAAGR,CAAK,CAAA,CAE/B,IAAA,CAAK,iBACP,CAEQ,YAAYN,CAAAA,CAAuB,CACzC,IAAMU,CAAAA,CAAQ,IAAA,CAAK,MAAA,CAAO,SAAA,CAAUH,CAAAA,EAAOA,CAAAA,CAAI,KAAOP,CAAO,CAAA,CACzDU,IAAU,EAAA,GACZ,IAAA,CAAK,OAAO,MAAA,CAAOA,CAAAA,CAAO,CAAC,CAAA,CAC3B,IAAA,CAAK,cAAA,IAET,CACA,EAGO,SAASK,CAAAA,CAAaxB,CAAAA,CAAkC,CAC7D,IAAMyB,CAAAA,CAAW,IAAI1B,CAAAA,CACrB,OAAA0B,CAAAA,CAAS,KAAKzB,CAAM,CAAA,CACbyB,CACT,CC7ZO,IAAM7C,EAAiB,CAACkB,CAAAA,CAAahB,CAAAA,CAAmC,EAAC,GACvEF,CAAAA,CAAmBkB,EAAK,CAC7B,IAAA,CAAMhB,EAAQ,IAAA,EAAQ,GAAA,CACtB,MAAOA,CAAAA,CAAQ,KAAA,EAAS,SAAA,CACxB,eAAA,CAAiBA,CAAAA,CAAQ,eAAA,EAAmB,UAC5C,oBAAA,CAAsBA,CAAAA,CAAQ,sBAAwB,GAAA,CACtD,MAAA,CAAQA,EAAQ,MAAA,EAAU,CAC5B,CAAC,CAAA,CAKI4C,CAAAA,CAAQ3B","file":"index.js","sourcesContent":["import QRCode from 'qrcode';\nimport { v4 as uuidv4 } from 'uuid';\n// QR code generation options\nexport interface QRCodeOptions {\n  size?: number;\n  color?: string;\n  backgroundColor?: string;\n  errorCorrectionLevel?: 'L' | 'M' | 'Q' | 'H';\n  margin?: number;\n}\n\n/**\n * Generate a QR code as a data URL\n * @param data - Data to encode in the QR code\n * @param options - QR code generation options\n * @returns Promise that resolves with the data URL of the QR code\n */\nexport async function generateQrCode(\n  data: string | object,\n  options: QRCodeOptions = {}\n): Promise<string> {\n  const {\n    size = 200,\n    color = '#000000',\n    backgroundColor = '#ffffff',\n    errorCorrectionLevel = 'H',\n    margin = 1,\n  } = options;\n\n  const dataString = typeof data === 'string' ? data : JSON.stringify(data);\n\n  try {\n    // Create a canvas element to render the QR code\n    const canvas = document.createElement('canvas');\n    \n    // Generate QR code to canvas with direct color strings\n    await QRCode.toCanvas(canvas, dataString, {\n      width: size,\n      color: {\n        dark: color as string,\n        light: backgroundColor as string,\n      },\n      errorCorrectionLevel,\n      margin,\n    });\n    \n    // Convert canvas to data URL\n    return canvas.toDataURL('image/png');\n  } catch (error) {\n    console.error('Failed to generate QR code:', error);\n    throw new Error('Failed to generate QR code');\n  }\n}\n\n/**\n * Generate a unique session ID\n * @returns A unique session ID string\n */\nexport function generateSessionId(): string {\n  return `sess_${uuidv4().replace(/-/g, '')}`;\n}\n\n/**\n * Generate a QR code URL for the upload page\n * @param frontendUrl - Base URL of the frontend\n * @param sdkRoute - SDK route (default: '/qr-upload')\n * @param sessionId - Optional session ID\n * @returns Full URL for the QR code\n */\nexport function generateQrUrl(\n  frontendUrl: string,\n  sdkRoute = '/qr-upload',\n  sessionId?: string\n): string {\n  const url = new URL(sdkRoute, frontendUrl);\n  \n  if (sessionId) {\n    url.searchParams.append('sessionId', sessionId);\n  }\n\n  return url.toString();\n}\n","// Core types\ninterface ImageFile {\n  id: string;\n  previewUrl: string;\n  file: File;\n  status: 'pending' | 'uploading' | 'uploaded' | 'error';\n  progress?: number;\n  error?: string;\n}\n\ninterface ApiConfig {\n  url: string;\n  headers?: Record<string, string>;\n  body?: Record<string, any>;\n}\n\ninterface QrUploadConfig {\n  frontendUrl: string;\n  sdkRoute?: string;\n  uploadApi: ApiConfig;\n  fetchApi?: ApiConfig;\n  autoStartCamera?: boolean;\n  maxImages?: number;\n  allowedMimeTypes?: string[];\n  onUploadComplete?: (response: any) => void;\n  onError?: (error: Error) => void;\n}\n\n// Import utilities\nimport { generateQrCode, generateQrUrl, generateSessionId } from './utils/qr';\n\n// Export types\nexport type { ImageFile, ApiConfig, QrUploadConfig };\n\n// Add QR code options type\nexport interface QRCodeGenerationOptions {\n  size?: number;\n  color?: string;\n  backgroundColor?: string;\n  errorCorrectionLevel?: 'L' | 'M' | 'Q' | 'H';\n  margin?: number;\n}\n\nexport interface IQRUploadSDK {\n  init(config: Partial<QrUploadConfig>): void;\n  mount(container: HTMLElement): void;\n  unmount(): void;\n  startCamera(): Promise<void>;\n  stopCamera(): void;\n  captureImage(): Promise<Blob>;\n  uploadImage(file: File): Promise<any>;\n  generateQrCode(options?: QRCodeGenerationOptions): Promise<string>;\n}\n\nexport class QrUpload implements IQRUploadSDK {\n  private config: QrUploadConfig;\n  private images: ImageFile[] = [];\n  private container: HTMLElement | null = null;\n  private sessionId: string = '';\n  private isInitialized: boolean = false;\n  private videoElement: HTMLVideoElement | null = null;\n  private mediaStream: MediaStream | null = null;\n\n  constructor(config?: QrUploadConfig) {\n    this.config = config || this.getDefaultConfig();\n    this.sessionId = generateSessionId();\n  }\n\n  /**\n   * Get default configuration for the QrUpload instance\n   * @returns Default configuration object\n   */\n  private getDefaultConfig(): QrUploadConfig {\n    return {\n      frontendUrl: typeof window !== 'undefined' ? window.location.origin : '',\n      sdkRoute: '/qr-upload',\n      uploadApi: {\n        url: '/api/upload',\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      },\n      autoStartCamera: true,\n      maxImages: 10,\n      allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp'],\n    };\n  }\n\n  /**\n   * Initialize the QrUpload instance with configuration\n   * @param config - Configuration options\n   */\n  public init(config: Partial<QrUploadConfig>): void {\n    this.config = { ...this.getDefaultConfig(), ...config };\n    this.sessionId = generateSessionId();\n    this.isInitialized = true;\n  }\n\n  /**\n   * Mount the upload interface to the specified container\n   * @param container - The HTML element to mount the interface to\n   */\n  public mount(container: HTMLElement): void {\n    if (!this.isInitialized) {\n      throw new Error('QrUpload must be initialized with init() before mounting');\n    }\n\n    this.container = container;\n    this.renderInterface();\n\n    if (this.config.autoStartCamera) {\n      this.startCamera().catch(error => {\n        console.warn('Failed to start camera automatically:', error);\n      });\n    }\n  }\n\n  /**\n   * Unmount the upload interface\n   */\n  public unmount(): void {\n    this.stopCamera();\n    if (this.container) {\n      this.container.innerHTML = '';\n      this.container = null;\n    }\n  }\n\n  /**\n   * Start the camera\n   * @returns Promise that resolves when the camera is started\n   */\n  public async startCamera(): Promise<void> {\n    this.ensureInitialized();\n    \n    if (this.mediaStream) {\n      return; // Already started\n    }\n\n    try {\n      this.mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: 'environment' },\n        audio: false,\n      });\n\n      if (this.videoElement) {\n        this.videoElement.srcObject = this.mediaStream;\n        await this.videoElement.play();\n      }\n    } catch (error) {\n      this.handleError(new Error(`Failed to start camera: ${error instanceof Error ? error.message : String(error)}`));\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the camera\n   */\n  public stopCamera(): void {\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n    \n    if (this.videoElement) {\n      this.videoElement.srcObject = null;\n    }\n  }\n\n  /**\n   * Capture an image from the camera\n   * @returns The captured image as a Blob\n   */\n  public async captureImage(): Promise<Blob> {\n    this.ensureInitialized();\n    \n    if (!this.videoElement) {\n      throw new Error('Video element not initialized');\n    }\n\n    const canvas = document.createElement('canvas');\n    canvas.width = this.videoElement.videoWidth;\n    canvas.height = this.videoElement.videoHeight;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Could not get canvas context');\n    }\n    \n    ctx.drawImage(this.videoElement, 0, 0, canvas.width, canvas.height);\n    \n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (blob) {\n          resolve(blob);\n        } else {\n          reject(new Error('Failed to capture image'));\n        }\n      }, 'image/jpeg', 0.9);\n    });\n  }\n\n  /**\n   * Upload an image\n   * @param file - The file to upload\n   * @returns Promise that resolves when the upload is complete\n   */\n  public async uploadImage(file: File): Promise<any> {\n    this.ensureInitialized();\n    \n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const imageId = `img-${Date.now()}`;\n    const imageFile: ImageFile = {\n      id: imageId,\n      previewUrl: URL.createObjectURL(file),\n      file,\n      status: 'pending',\n    };\n    \n    this.images.push(imageFile);\n    this.updateImageStatus(imageId, 'uploading');\n    \n    try {\n      const response = await fetch(this.config.uploadApi.url, {\n        method: 'POST',\n        headers: this.config.uploadApi.headers,\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Upload failed with status ${response.status}`);\n      }\n      \n      const result = await response.json();\n      this.updateImageStatus(imageId, 'uploaded');\n      \n      if (this.config.onUploadComplete) {\n        this.config.onUploadComplete(result);\n      }\n      \n      return result;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      this.updateImageStatus(imageId, 'error', undefined, errorMessage);\n      this.handleError(new Error(`Upload failed: ${errorMessage}`));\n      throw error;\n    }\n  }\n\n  /**\n   * Generate a URL that will be encoded in the QR code\n   * @returns The URL for the QR code\n   */\n  public generateQrUrl(): string {\n    this.ensureInitialized();\n    \n    return generateQrUrl(\n      this.config.frontendUrl,\n      this.config.sdkRoute || '/qr-upload',\n      this.sessionId\n    );\n  }\n\n  /**\n   * Generate a QR code for the current session\n   * @param options QR code generation options\n   * @returns Promise that resolves with the QR code data URL\n   */\n  /**\n   * Generates a QR code for the current session\n   * @param options - Options for QR code generation\n   * @returns Promise that resolves with the data URL of the generated QR code\n   */\n  public async generateQrCode(options: QRCodeGenerationOptions = {}): Promise<string> {\n    this.ensureInitialized();\n    const url = this.generateQrUrl();\n    \n    return generateQrCode(url, {\n      size: options.size ?? 200,\n      color: options.color ?? '#000000',\n      backgroundColor: options.backgroundColor ?? '#ffffff',\n      errorCorrectionLevel: options.errorCorrectionLevel ?? 'H',\n      margin: options.margin ?? 1,\n    });\n  }\n\n  // Private helper methods\n  private ensureInitialized(): void {\n    if (!this.isInitialized) {\n      throw new Error('QrUpload must be initialized with init() before use');\n    }\n  }\n\n  private handleError(error: Error): void {\n    console.error('QrUpload Error:', error);\n    if (this.config.onError) {\n      this.config.onError(error);\n    }\n  }\n\n  private updateImageStatus(\n    imageId: string,\n    status: 'pending' | 'uploading' | 'uploaded' | 'error',\n    data?: { progress?: number },\n    error?: string\n  ): void {\n    const image = this.images.find(img => img.id === imageId);\n    if (image) {\n      image.status = status;\n      if (data?.progress !== undefined) {\n        image.progress = data.progress;\n      }\n      if (error) {\n        image.error = error;\n      }\n      this.renderInterface();\n    }\n  }\n\n  private renderInterface(): void {\n    if (!this.container) {\n      return;\n    }\n\n    // Basic UI structure\n    this.container.innerHTML = `\n      <div class=\"qr-upload-container\">\n        <div class=\"camera-preview\">\n          <video class=\"video-preview\" autoplay playsinline></video>\n          <button class=\"capture-button\">Capture</button>\n        </div>\n        <div class=\"preview-container\"></div>\n        <div class=\"status\"></div>\n      </div>\n    `;\n\n    // Store reference to video element\n    this.videoElement = this.container.querySelector('.video-preview');\n\n    // Render existing previews (if any)\n    this.renderPreviews();\n\n    // Set up event listeners\n    const captureButton = this.container.querySelector('.capture-button');\n    if (captureButton) {\n      captureButton.addEventListener('click', async () => {\n        try {\n          const blob = await this.captureImage();\n          const file = new File([blob], `capture-${Date.now()}.jpg`, { type: 'image/jpeg' });\n          await this.uploadImage(file);\n        } catch (error) {\n          this.handleError(error instanceof Error ? error : new Error(String(error)));\n        }\n      });\n    }\n\n    // Start camera if configured\n    if (this.config.autoStartCamera && this.videoElement) {\n    this.startCamera().catch(error => {\n      this.handleError(error instanceof Error ? error : new Error(String(error)));\n    });\n  }\n}\n\n/**\n * Render image previews with drag & drop reorder and remove buttons\n */\nprivate renderPreviews(): void {\n  if (!this.container) return;\n\n  const previewContainer = this.container.querySelector('.preview-container') as HTMLElement | null;\n  if (!previewContainer) return;\n\n  previewContainer.innerHTML = '';\n\n  this.images.forEach((img, index) => {\n    const item = document.createElement('div');\n    item.className = 'preview-item';\n    item.draggable = true;\n    item.dataset.index = String(index);\n\n    item.innerHTML = `\n      <img src=\"${img.previewUrl}\" alt=\"preview\" />\n      <button class=\"remove-btn\" title=\"Remove\">&times;</button>\n    `;\n\n    // Drag events\n    item.addEventListener('dragstart', ev => {\n      ev.dataTransfer?.setData('text/plain', String(index));\n    });\n\n    item.addEventListener('dragover', ev => {\n      ev.preventDefault();\n    });\n\n    item.addEventListener('drop', ev => {\n      ev.preventDefault();\n      const from = Number(ev.dataTransfer?.getData('text/plain'));\n      const to = Number((ev.currentTarget as HTMLElement).dataset.index);\n      if (!Number.isNaN(from) && !Number.isNaN(to) && from !== to) {\n        this.reorderImages(from, to);\n      }\n    });\n\n    // Remove button\n    const removeBtn = item.querySelector('.remove-btn');\n    removeBtn?.addEventListener('click', () => {\n      this.removeImage(img.id);\n    });\n\n    previewContainer.appendChild(item);\n  });\n}\n\nprivate reorderImages(from: number, to: number): void {\n  if (from < 0 || from >= this.images.length || to < 0 || to >= this.images.length) {\n    return;\n  }\n\n  const image = this.images[from];\n  this.images.splice(from, 1);\n  this.images.splice(to, 0, image);\n  \n  this.renderPreviews();\n}\n\nprivate removeImage(imageId: string): void {\n  const index = this.images.findIndex(img => img.id === imageId);\n  if (index !== -1) {\n    this.images.splice(index, 1);\n    this.renderPreviews();\n  }\n}\n}\n\n// Export the initialization function\nexport function initQrUpload(config: QrUploadConfig): QrUpload {\n  const qrUpload = new QrUpload();\n  qrUpload.init(config);\n  return qrUpload;\n}\n\n// Re-export the generateQrCode function from utils/qr\nexport { generateQrCode } from './utils/qr';\n","// Import the QrUpload class and its types\nimport { QrUpload, initQrUpload } from './QrUpload';\nimport type { \n  QrUploadConfig, \n  ImageFile, \n  ApiConfig, \n  QRCodeGenerationOptions,\n  IQRUploadSDK \n} from './QrUpload';\n\n// Import QR code utilities\nimport { generateQrCode as generateQrCodeUtil, generateQrUrl, generateSessionId } from './utils/qr';\n\n// Re-export types\nexport type { \n  QrUploadConfig, \n  ImageFile, \n  ApiConfig, \n  QRCodeGenerationOptions,\n  IQRUploadSDK\n};\n\n// Re-export the QrUpload class and initQrUpload function\nexport { QrUpload, initQrUpload };\n\n// Re-export utility functions\nexport { generateQrUrl, generateSessionId };\n\n// Export the generateQrCode function with proper typing\nexport const generateQrCode = (url: string, options: QRCodeGenerationOptions = {}): Promise<string> => {\n  return generateQrCodeUtil(url, {\n    size: options.size || 200,\n    color: options.color || '#000000',\n    backgroundColor: options.backgroundColor || '#ffffff',\n    errorCorrectionLevel: options.errorCorrectionLevel || 'H',\n    margin: options.margin ?? 1,\n  });\n};\n\n\n// Default export for backward compatibility\nexport default QrUpload;\n"]}